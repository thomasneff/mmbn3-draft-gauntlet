waiting for music is broken
draft has issues when skipping too fast
muramasa is broken
for some reason we desynced once when loading mm&bass music
desync because save state loading doesnt really work...
memebomb doesnt reset with soft reset ?!
sending a spectator chip and then choosing nothing in the cust screen is broken

solve desync issue by simply sending *every frame* and pausing the emulator unless we have an input for any given frame -> send empty messages to still enable spec chips


TODO: test navicust buffs after refactor to GENERIC_DEFS
TODO: test everything that was changed when refactoring to use io_utils instead of memory
TODO: test regenerator after refactor to 1 battle savestate instead of 10 battle

TODO test: Snecko eye, illusion of choice (changed rng)
TODO: make sure rng is advanced for buffs, chip generation

TODO: make sure buffs are seeded, check all calls of math.random for "seededness" requirement. 
generally, everything that is done should not effect the order of enemies/chips/etc. 

even when you do drop e.g. a lootbox, the whole rng should stay consistent.

need: 
buff_effect_rng (everything that rolls random in buffs themselves)

the main "issue" is staying consistent when someone picks a buff that has rng vs. a non-rng buff.

proposal: find out the maximum number of random rolls for all buffs, and advance rng by this amount every time a buff is activated?

(potential issue): buffs also roll rng when they are shown -> should be no big deal. this will use the "global" rng, but will stay consistent when the same buffs are shown.

-> only need to check every "activate" call.

need some kind of drop-in replacement for math.random. could use util.math.random or something that has the same functionality but uses the seeded rng from gauntlet_data.

new file which imports gauntlet_data and provides x.math.random with the same signature.

maybe also factor out the other rng. (use an additional string argument that specifies which rng to use)


Buffs:

Add (x / 40) text after "Boss" in UI

Illusion of Choice: does it replace a megachip if the limit is reached? -> yes
fixed rewind not resetting after every battle

After using mega/heat/giga/N chips/enter cust gauge/..., deal +X buster damage on next shot
    - requires buster damage logic in battle



A buff that hides your folder view (and make sure sorting also randomizes stuff accordingly), with some kind of bonus

Skipping chip rewards progressively builds up a bonus until a chip is picked


More damage based on panel you're standing on
    - requires panel detection logic

More damage based on which row you're standing on
    - requires panel detection logic


Bounties: 
Defeat a boss without taking damage <-- pretty stupid when the lootbox replaces the drops...

    - Bounties influence the next dropped chips after completion
        - need callback for chip drop of all buffs to manip dropped chips
        - could e.g. drop a MegaChip according to the current "level" of the gauntlet, or just a good utility/situational chip that's hard to come by
    - Bounties also increase drop rarity by X %
    - Bounties show their current state in brief_description
        - Simply log this until they are completed

Bounty reward: Lootbox! (Totem/Sensor/MetaGel/etc.)


Low-prio: on chip drop event refactor of top tier.

Could track folder chip use statistics and force a very strong buff to replace your most used chip?







DONE: optimization was successful so far - Laptop runs at 70-80 FPS unthrottled, so this should be fine regarding the "headroom" of FPS for even weaker machines.
still, even removing the cust_screen_confirm hook would be amazing.

Rewind might be bugged? I swear it didn't trigger when it should have and mis-triggered before ...?
chip used is bugged -> right now I ended the fight with a chip left, and the next battle instantly fired chip used and killed mega (because battle phase was on, apparently)
    - fixed by creating a "was custscreen opened flag" to prevent hp from being read from the last battle


We need optimization. (It only runs with 40-50FPS on my bad/old laptop).

Idea: disable all hooks during battle that are not necessary, and try to poll the ones that are necessary? maybe we can find a very easy flag that is pollable in the main loop?

(TODO: checkout the event.onframestart for the main loop instead of the yield infinite loop)

optimization:

on_enter_battle can be disabled as soon as it fires, is reenabled in on_battle_end
on_battle_end can be disabled as soon as it fires, is reenabled in on_enter_battle

^--- this is 1 event that is permanently on_battle_end

on_cust_screen_confirm has to be on :( -> try replacing it with a custom polling based hook? We found this by looking through memory and shit, there has to be a flag that triggers upon doing this (?) maybe even registers or stuff

on_chip_use -> has to be on, but can probably be polled easily in a frame based loop

on_battle_phase_start -> has to be on, but can probably be polled easily in a frame-based loop
 

we IDEALLY want to have a maximum of 2 onmemoryexecute events running during battle. I think this is easily doable.

TODOOOOOO: current build is really buggy. seems to reset upon finishing a battle (?), on_chip_use might be tough, as the address changes all the time :/
it's probably an address on the stack (?)

for now, test with on_chip_use as a hook
(time compression / rewind might be broken with the new optimized shit)


implement all the new mechanics as buffs :)

possibly make all brief descriptions consistent so they show either individuals or totals

I think for the chip use effects, i might use a function that passes the used chip, state_logic, current frame and does everything itself?

for all hand/chip use manip effects:
    - make sure that a neat concept is used that is able to generically add chip use conditions.
        *   e.g.: first chip in battle is copied
            - needs a per round / per battle counter
            - has as condition: 1 any
            - has as effect: add the used/first chip again
            - gauntlet data needs to have a list of those buffs, and they implement onRoundStart and onChipUse


 x new buff that adds airshot/heatshot/zapring/bubbler to the "hand" upon certain circumstances
new buff that heals upon hand/use condition (?)
new buff that deals damage (random/all) upon hand/use condition
 x new buff that allows the first chip in battle to be used twice
e.g. buff that temporarily increases buster damage/weaponlevel if 3 elements are used (need buster address in battle...)

if possible to read current chip damage IN BATTLE:
    * TODO: maybe we need a new hook that signifies the start of turn after cust screen?
    *       otherwise upon first frame we store our in-battle chip damage, and then compute additional damage based off of that.
    *       we compute additive before multiplicative
    *       we need to test how PAs affect the in-battle held chips
    -   muramasa effect (additive and multiplicative variants)
        * + damage based on missing HP (less -> more), up to 30% / 30 flat 
    -   reverse muramasa effect (additive and multiplicative variants)
        * + damage based on missing HP (more -> more), up to 30% / 30 flat 
    -   custswrd effect (additive and multiplicative variants)
        * + damage based on cust% (more is more, 0x40 -> 0), up to 30% / 30 flat 
    -   reverse custswrd effect (additive and multiplicative variants)
        * + damage based on cust% (less is more, 0x40 -> 0), up to 30% / 30 flat 


buff that checks for number of enemies and applies buffs
    * 1 enemy: +30% damage, more: -20% damage
    * 1 enemy: "fastgauge", more: "slowgauge"

buff that turns a random chip in your starting hand into * code (this battle only)


something crazy to think about: a slay the spire mode -> folder is unlimited (by dynamically patching indices and chips during battle), 
  draft starting deck, and then just add/skip chips. would probably need UI adjustments as well and make sure that all folder stuff isn't hardcoded to 30
  however, I think this would make the game way too easy, and would therefore require tons of balance changes.
  (imagine a folder containing lots of heal chips -> it's almost impossible to die)

A buff that increases the number of dropped chips (change dropped chip rendering to be able to handle more than 3)
A buff that increases the number of dropped buffs (dropped buff rendering is already able to do this)




Buff: something awesome -> enemies regenerate 1 HP per second

Add buff description to statistics container for every round, just for information

Bug:

one of the bcc songs crashes



Following entity config:
stage = 27
MetalCube
Canodumb2
Twinner
Twinner
Twinner

When attacking all with plantman (and killing them) the game auto-reset.


Buffs:


Space-Pause-Continuum: every time pause is pressed, lose HP equal to 1% MaxHP, Custom + 2, HP + 100






Entities. Add all the info from TREZ.

During Drafting:
\randomchoice.lua:3: bad argument #1 to 'pairs' (table expected, got nil)

Choosing the 6 codes loadout sometimes crashes randomchoice_key in line 7, so probably megachips/standardchips are nil?


BUG/UNINTENDED: The on_enter_battle() callback gets fired twice after the initial battle. Doesn't matter however, as we guard against that anyways.

Add all virus families to debuff-buff, otherwise remove for now.


Test if all buffs and patching still works. Look at HP, Custom+, all other NaviCust things, styles...

BUG/Intentional? Picking an HP buff in round 5 restores HP. Could be a nice intended strategy?


Remove N-O-2 virus, as it's OP.



Possibly implement images for buffs? Would implement simply as chip_id and render a chip.
Possibly implement buff rarities? Normal, Mega, Giga?



Implement better battle progression (split into easy, medium, hard viruses, with t1, t2, t3, t4, possibly t5)





Implement example buff that implements custom + (e.g. All Mettaur-Virusses instantly kill you, but you start with +X custom chips)
Find out how to change cust gauge speed.


Find out Boomer PanelGrab offset.
Find out Swordy AreaGrab offset.
Find out Pengi IceStage offset. <-- this should be easy, as I don't remember any other virus/navi using IceStage.


Possibly implement a system to create fixed fights the game can choose from. Should contain ENTITIES, BACKGROUND, STAGE.



TODO:
Chip Data defs, index to Name, Chip Icon, Chip Image, address for codes, damage
we automatically patch over it at the start with those values


contain drop tables for chips, 
map from chance to list of chips with codes?

ChipGenerator.GetChipWithSpecificCodeIfExists(CHIPS.ShockWav, CHIP_CODE.A) -- this either returns a chip with code A if it exists, or non-asterisk otherwise.

-- If there are only asterisk (for whatever reason) just return asterisk.
60 =  ChipGenerator.GetChipListNonAsterisk(CHIPS.ShockWav) -- this returns copies of the shockwav chip with all non-asterisk codes, which contains address, index, etc., to put into folder

80 =  ChipGenerator.GetChipAsterisk(CHIPS.Guard) -- should also return a list with a single entry.

95 = ChipGenerator.GetChipAsterisk(CHIPS.ShockWav)

100 = ChipGenerator.GetChipListNonAsterisk(CHIPS.SonicWav)
