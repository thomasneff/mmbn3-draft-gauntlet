Implement AI byte patching

Implement per-battle patching, so we can pre-define all battles and just patch one-by-one
 - Changed battle patching to now be per-battle. This removes the need of pointer adjustment.
 - We simply patch each battle as it comes, and use the existing offsets :-)

Implement a system that forces battles 5 and 10 to be single-enemy. (probably some flag in GAUNTLET_DEFS)

Find the offset for Dominerd's Chip (should be Geddon, probably need to debug with No$GBA to find when he uses geddon.)
 - The number of Geddon chips is put into 0203735E RAM during battle start.
 - The number of attacks before Geddon is put into 020373A8 RAM during battle start.
 - 080C4B58 contains the test for the number of attacks between geddons.
 - 080C4EBC contains the sub instruction for reducing the number of attacks
 - after subbing and *not* branching, it loads the content of 020373D0 (= 080AEB30, which is Dominerd AI start) into r1.
 - at AI + 0x06, load delay into r1.
 -
 - After waiting for the delay, it executes the test @ 080C4B58 again. It doesn't branch. r0 == 0
 - Loads Dominerd AI address into r0
 - Loads Number of Geddons into r0
 - Subtracts 1 (080C4B66)
 - It loads 0x19 into r0, which is the chip family, and 0x00 into r1, which is the sub-family. loads 0x01 into r2, 0x0A into r3. This might be damage?
 - Actually, 0x01 might be the user... we might be able to hook into this?
 - Anyways, the Chip Family is at 080C4B6C, the Subfamily is at 080C4B6E. Damage is in r3, which gets set in 080C4B72. User gets pulled from RAM, so bad luck there, unless we 
   want to hook into it, which we definitely could.


Deetle and HardHead are definitely bugged. Sometimes their shots fly offscreen?
 - This was just an emulator bug with VBA-RR and solved itself when switching to BizHawk.

Add special code for Twins viruses, such that if they spawn, they are the only virus type, otherwise their AI is screwed up and they don't do anything.

Add code to reload the script with a button combination.

Dump Chip names and descriptions. (Dump such that constant strings are defined for easy editing.
Possibly also dump string length at the same time so we don't overwrite anything.
    - This is all pretty unnecessary... I dumped chip name addresses, that's enough for now.

Implement rendering of icons in folder.

Implement Chip Patching of folder. Patch every time a chip is replaced.

Implement Chip replacement logic.

Automatically patch all chip data in folder when something is "upgraded". For now, we can just patch before every battle.

Implement HP scaling over rounds.

Implement Roguelike-style upgrades after each round. For that, make all variables part of state_logic, and each upgrade simply has a name, description and function that gets called upon selection.

Find out battle clear offset, to load initial.State again after finishing 10 battles.
    - Found 0x08029398. This is executed when finishing a battle, therefore can be used to count battles.

Implement Chip Picture rendering.

Implement example buff ("Cannons do + 20 Damage"), to test chip patching of folder chips.

Implement example buff nerfing specific kinds of viruses.

BUG: soft-resetting doesn't reset all upgrades.
SOLUTION: probably implement an "UNDO" for all buffs, store all activated buffs and undo them all upon soft reset.

During battle, Bolt is fine. Therefore I think just the picture offsets might be messed up, since we don't patch those.
However, it seems more like the name offsets for rendering (... PRINT_NAME?) might be wrong, since during game everything is fine,
but during rendering, the names are wrong, but the icons are correct.
BUG: Fountain picture was displayed with name Bolt
BUG: Bolt picture was displayed with name GaiaBlade
    - Has the correct picture + icon for Fountain, but wrong name. Damage and other stuff is also correct.
    - During battle, the name is correct, so it's probably just the name offset, that's wrong, since we don't patch the names.
    - The bug results from Punk missing from my CHIP IDs. (should be 0x110). Afterwards everything is screwed up until KingMan, where 0x117 is missing.
    - We need to dump the chip data again :(

    - BUG: KingMan (V1) icon is the one from GaiaBlade


Get all virus breeder viruses in the save game so the chips don't puff.


02001DCA sets style change after battle. we might be able to find out how this influences the style change RNG. Then we could manipulate it and just load a style-change savestate.

at 08015CB2, current style (0x11 for ElecCust) is loaded into r0.
at 08015B48,  after hitting "overwrite" for the style, it is written into the currently equipped modifier.
at 08015B3A, the TYPE of the style might loaded from 0200F8DA (at least it's one part of the style)
at 08015B3E, the ELEMENT of the style might be loaded from 0200F8DB
at 08015B40, the final style code is written into r0.
... Changing r0 here DOES change the style!
Then r0 (the style code) is stored at 02001880 + 1 and 02001880 + 14
STYLE OFFSETS before battle: 0x02001881, 0x02001894

in transition, style is stored first to 0x0200F334
then gets stored into 0x0203B39C

Style: Style-equipped modifier is at 0x02001894. Need to fire up debugger to check what loads this and intercept.
  - At 0x08047306, the Number of Chips is set for CustStyle.
  - Name/Text for styles: 0x0871223C starts "ElecCust".
  - Style change routine sets the following, maybe this is also the NaviCust routine?
    - MegaChips: 5770 + 14
    - GigaChips: 5770 + 15
    - CustScreenChips: 5770 + 13
    - ??? : 5770 + 26 (this is set to 1 for ElecCust)
    - BusterAttack : 5770 + 8 (this is set to 0 for ElecCust)
    - BusterWeaponLevel : 5770 + D (this is set to 1 for ElecCust)
    - OilBody/AimFish/etc. : 5770 + 1B (this is set to FF for ElecCust)
    - ??? : 5770 + 4 (this is set to 1 for ElecCust)
    - CustScreenChips : 5770 + 13 (this is set to 7 for ElecCust)
    - BusterSpeed : 5770 + 9 (this is set to 1 for ElecCust)
    - BusterCharge : 5770 + A (this is set to 1 for ElecCust)
    - BusterSpeed : 5770 + 9 (again..? this is set to 2 for ElecCust)
  - It seems that 0803CB54 calls the NaviCust-RAM patch function at 0x08047340
  - It seems that 0803CAFA calls some function 08047304 upon changing to ElecCust, at least 02005770 is already in r2 at that point.
    - This might be the style initialization...? before calling it, it pushes hardcoded values of 0x04 into r0, 0x01 into r1. This is basically the fnuction that takes offset/value for navi cust stuff?

Weapon Level is also stored in 02009740 + 4 = 02009744

0x0200F334
memory.writebyte(0x0000F334, 0x1C, "EWRAM") <-- with our current setup, this successfully changes the style if done in TRANSITION_TO_RUNNING.



Find out how to change number of chips in Cust Screen.
  - 0x02005783 is the offset for number of chips before battle.
  - 0x02006CAE is the offset for number of chips during battle.
    - we should simply patch both.