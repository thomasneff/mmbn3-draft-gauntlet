Implement AI byte patching

Implement per-battle patching, so we can pre-define all battles and just patch one-by-one
 - Changed battle patching to now be per-battle. This removes the need of pointer adjustment.
 - We simply patch each battle as it comes, and use the existing offsets :-)

Implement a system that forces battles 5 and 10 to be single-enemy. (probably some flag in GAUNTLET_DEFS)

Find the offset for Dominerd's Chip (should be Geddon, probably need to debug with No$GBA to find when he uses geddon.)
 - The number of Geddon chips is put into 0203735E RAM during battle start.
 - The number of attacks before Geddon is put into 020373A8 RAM during battle start.
 - 080C4B58 contains the test for the number of attacks between geddons.
 - 080C4EBC contains the sub instruction for reducing the number of attacks
 - after subbing and *not* branching, it loads the content of 020373D0 (= 080AEB30, which is Dominerd AI start) into r1.
 - at AI + 0x06, load delay into r1.
 -
 - After waiting for the delay, it executes the test @ 080C4B58 again. It doesn't branch. r0 == 0
 - Loads Dominerd AI address into r0
 - Loads Number of Geddons into r0
 - Subtracts 1 (080C4B66)
 - It loads 0x19 into r0, which is the chip family, and 0x00 into r1, which is the sub-family. loads 0x01 into r2, 0x0A into r3. This might be damage?
 - Actually, 0x01 might be the user... we might be able to hook into this?
 - Anyways, the Chip Family is at 080C4B6C, the Subfamily is at 080C4B6E. Damage is in r3, which gets set in 080C4B72. User gets pulled from RAM, so bad luck there, unless we 
   want to hook into it, which we definitely could.


Deetle and HardHead are definitely bugged. Sometimes their shots fly offscreen?
 - This was just an emulator bug with VBA-RR and solved itself when switching to BizHawk.

Add special code for Twins viruses, such that if they spawn, they are the only virus type, otherwise their AI is screwed up and they don't do anything.

Add code to reload the script with a button combination.

Dump Chip names and descriptions. (Dump such that constant strings are defined for easy editing.
Possibly also dump string length at the same time so we don't overwrite anything.
    - This is all pretty unnecessary... I dumped chip name addresses, that's enough for now.

Implement rendering of icons in folder.

Implement Chip Patching of folder. Patch every time a chip is replaced.

Implement Chip replacement logic.

Automatically patch all chip data in folder when something is "upgraded". For now, we can just patch before every battle.

Implement HP scaling over rounds.

Implement Roguelike-style upgrades after each round. For that, make all variables part of state_logic, and each upgrade simply has a name, description and function that gets called upon selection.

Find out battle clear offset, to load initial.State again after finishing 10 battles.
    - Found 0x08029398. This is executed when finishing a battle, therefore can be used to count battles.

Implement Chip Picture rendering.
