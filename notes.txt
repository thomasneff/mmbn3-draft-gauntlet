1st Monolith in Secret 1:
1:
Mettaur3, Mettaur3, Mettaur3
03 04 02 01 03 05 03 01 03 06 01 01  <-- @ 0001AAB8, start @ 0001AAB0

2:
Poofball
2E 05 02 01 <-- start @ 0001AAA4

3:
0001AA94


battles are stored in reverse ascending order, which sucks


pointer to gauntlet -> possibly 00423558? <-- NOPE


10:
0001AA10

TEST: change locations of 0001AA10 to 0001A970

000199BF: nope
002A754E: nope
00446C1B: nope
0049F725: nope
004A1D9B: nope
004BC06A: nope
004C9486: nope
004F8691: nope
00501025: nope
005169DB: nope
00522C8F: nope
005237E6: nope
005946FE: nope

so it doesn't seem to be absolutely adressed.

Just adding more viruses doesn't work, need to find the pointer table for the battle.

CMP r0, 0xFF in 08002906 seems to be the check for battle boundaries
r7 contains the current offset when there (0801AABC) -> check when r7 changes to find out!
first r0 contains the address, 0801AAB4

battle subroutine starts at 080028F0
it is called at 08006666

first, r0 gets value of ldr 02006CA0 + 6C = 02006D0C
r0 = 0200F8C8

then, r0 is offset by 0x04
this is where our address is stored. 0200F8CC

080146B2: r0 contains our address (0801AAB4), stores it into wram @ 0200F8CC
0801469E: start of subroutine, where r0 contains address
0812E606: function called
0812E600: r0 is read from r7, r7 contains 0812DD0C. THIS CONTAINS (FFFF)[AAB40801]!

I found the pointer table!
0812DD0C



the first offset is @ 0812DC7C, then it is always 0x10 bytes offset (= 16 bytes aligned)

let's find out how it Manages the gauntlet?

0812F18C calls something with updated r0 after the fight.

there seems to be another copy of the pointer table? weird
0812E830

in the routine at 0812F176, the number of fights left is loaded from 02008F38

0812E630 is the base pointer table offset I think
0812F180 contains the instruction to skip over 0x10 bytes every time


RAM values for enemy HP (3 mettaur fight)
0200F8B2
02037368

@ 08005AFC, both r1 and r2 contain enemy HP

r0 contains 08019630, might by enemy data for Mettaur3.
yep.

seems to be 8 bytes per virus

Mettaur1 virus data address (HP) starts at 08019620

Mettaur1 name address: 087114EC, seems to be until E7 (end of string) is encountered


Folder Hacking:

02001410 seems to contain the first chip in the first folder.

Structure: 4 bytes:
Byte 1: Chip-ID lowbyte (some values crash the folder, e.g. 0x39 when lowbyte is set to 0x01)
Byte 2: Chip-ID highbyte (max 0x01)
Byte 3: Code (this can be *ANY* code!)
Byte 4: ?? doesn't seem to do anything

so basically just a 2 byte chip ID, and probably 2 bytes code?


At the point I'm doing it, Manipulating the folder is already too late.
At 080114B6, the first chip in the first folder is accessed.
This is computed every frame during chip select? But that means that changing it should have an effect?
And indeed, it does. So I'm doing it wrong.



For HP changes, the RAM address used for "Current HP" is 0x020018A0, "Max HP" is at 0x020018A2