Entities. Add all the info from TREZ.

Special drops for Miniboss/Bosses? Drop tables are already implemented, would only need to be defined.




Test if all buffs and patching still works. Look at HP, Custom+, all other NaviCust things, styles...

BUG/Intentional? Picking an HP buff in round 5 restores HP. Could be a nice intended strategy?


Remove N-O-2 virus, as it's OP.



Possibly implement images for buffs? Would implement simply as chip_id and render a chip.
Possibly implement buff rarities? Normal, Mega, Giga?



Implement better battle progression (split into easy, medium, hard viruses, with t1, t2, t3, t4, possibly t5)



Implement other buffs related to NaviCust stuff.


All NaviCust programs can simply be patched in TRANSITION_TO_RUNNING


ShadowShoes: 0x02005772 <-- set to 0x01
FloatShoes: 0x02005772 <-- set to 0x02
BreakBuster: 0x02005776
BreakCharge: 0x0200577E
BlockWithL: 0x0200577F <-- set to 0x02
ShieldWithL: 0x0200577F <-- set to 0x04
ReflectWithL: 0x0200577F <-- set to 0x06
DarkLicense: 0x02005790


Implement example buff that implements custom + (e.g. All Mettaur-Virusses instantly kill you, but you start with +X custom chips)
Find out how to change cust gauge speed.


Find out Boomer PanelGrab offset.
Find out Swordy AreaGrab offset.
Find out Pengi IceStage offset. <-- this should be easy, as I don't remember any other virus/navi using IceStage.


Possibly implement a system to create fixed fights the game can choose from. Should contain ENTITIES, BACKGROUND, STAGE.



TODO:
Chip Data defs, index to Name, Chip Icon, Chip Image, address for codes, damage
we automatically patch over it at the start with those values


contain drop tables for chips, 
map from chance to list of chips with codes?

ChipGenerator.GetChipWithSpecificCodeIfExists(CHIPS.ShockWav, CHIP_CODE.A) -- this either returns a chip with code A if it exists, or non-asterisk otherwise.

-- If there are only asterisk (for whatever reason) just return asterisk.
60 =  ChipGenerator.GetChipListNonAsterisk(CHIPS.ShockWav) -- this returns copies of the shockwav chip with all non-asterisk codes, which contains address, index, etc., to put into folder

80 =  ChipGenerator.GetChipAsterisk(CHIPS.Guard) -- should also return a list with a single entry.

95 = ChipGenerator.GetChipAsterisk(CHIPS.ShockWav)

100 = ChipGenerator.GetChipListNonAsterisk(CHIPS.SonicWav)
